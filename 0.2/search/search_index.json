{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DriViz","text":"CI/CD Package <p> Data Visualization Library containing the Dribia Theme. </p> <p>Documentation: https://dribia.github.io/driviz</p> <p>Source Code: https://github.com/dribia/driviz</p>"},{"location":"#key-features","title":"Key features","text":"<ul> <li>Consistent look: A theme for Altair and Matplotlib that provides a consistent look across projects.</li> <li>Easy to use: Just import the theme and enable it.</li> <li>Customizable: The theme can be customized to fit particular needs.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>driviz is available on PyPI, so you can install it with <code>pip</code>: <pre><code>pip install driviz\n</code></pre></p>"},{"location":"#example","title":"Example","text":"<pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\nfrom driviz import theme\n\ntheme.enable()\n\nt = np.arange(0.0, 2.0, 0.01)\ns = 1 + np.sin(2 * np.pi * t)\n\nfig, ax = plt.subplots()\nax.plot(t, s)\nax.set(xlabel='Time (s)', ylabel='Voltage (mV)')\nax.grid()\n\nfig.savefig(\"test.png\")\nplt.show()\n</code></pre>"},{"location":"contribute/","title":"Contribute","text":"<p> Contributions to Dribia libraries are always welcome! </p>"},{"location":"contribute/#mantainers","title":"Mantainers","text":"<p>DriViz is officially maintained by Dribia Code - code@dribia.com.</p>"},{"location":"contribute/#issues","title":"Issues","text":"<p>Questions, feature requests and bug reports are all welcome as discussions or issues.</p> <p>Please note which version of the library are you using whenever reporting a bug. <pre><code>python -c \"import driviz; print(driviz.__version__)\"\n</code></pre></p> <p>It would be very useful too to know which OS and Python version are your running <code>driviz</code> from.</p>"},{"location":"contribute/#contribute_1","title":"Contribute","text":"<p>In order to contribute, the first step is to clone yourself the code repository: <pre><code>git clone https://github.com/dribia/driviz.git\n</code></pre></p> <p>Poetry is the best way to interact with this project, to install it, follow the official Poetry installation guide. With poetry installed, one can install the project dependencies with: <pre><code>poetry install\n</code></pre></p> <p>Now you should be ready to start coding and prepare your pull request.</p> <p>Warning</p> <p>Please, make sure to run:</p> <ol> <li>The project unit tests <pre><code>make test-unit\n</code></pre></li> <li>The linters (<code>ruff</code> and <code>mypy</code>): <pre><code>make lint\n</code></pre></li> <li>Apply all code formatting: <pre><code>make format\n</code></pre></li> </ol> <p>before submitting your pull request.</p> <p>Happy coding! \ud83c\udf89</p>"},{"location":"usage/","title":"Usage","text":"<p>The most basic example for usage is: <pre><code>from driviz import theme\n\ntheme.enable()\n</code></pre></p>"},{"location":"usage/#examples","title":"Examples","text":"<pre><code>import altair as alt\nimport numpy as np\nimport pandas as pd\nimport random\n\nfrom driviz import theme\n\ntheme.enable()\n\nvariety =  [f\"V{i}\" for i in range(10)]\nsite = [f\"site{i:02d}\" for i in range(14)]\nk = 10000\ndf = pd.DataFrame(\n    data={\n        \"yield\": np.random.rand(k,),\n        \"variety\": random.choices(variety, k=k),\n        \"site\": random.choices(site, k=k),\n    }\n)\n\nselection = alt.selection_point(fields=[\"site\"], bind=\"legend\")\n\nbars = (\n    alt.Chart(df)\n    .mark_bar()\n    .encode(\n        x=alt.X(\"sum(yield):Q\", stack=\"zero\"),\n        y=alt.Y(\"variety:N\"),\n        color=alt.Color(\"site\"),\n        opacity=alt.condition(\n            selection, alt.value(1), alt.value(0.2)\n        )\n    )\n    .properties(title=\"Example chart\")\n    .add_params(selection)\n)\n\ntext = (\n    alt.Chart(df)\n    .mark_text(dx=-15, dy=3, color=\"white\")\n    .encode(\n        x=alt.X(\"sum(yield):Q\", stack=\"zero\"),\n        y=alt.Y(\"variety:N\"),\n        detail=\"site:N\",\n        text=alt.Text(\"sum(yield):Q\", format=\".1f\")\n    )\n)\n\nchart = bars + text\nchart.save(\n    \"altair_example_barh.html\"\n)\n</code></pre>"}]}